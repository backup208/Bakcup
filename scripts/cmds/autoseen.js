const fs = require('fs-extra');
const path = require('path');
const seenFile = path.join(__dirname, 'cache', 'autoseen.txt');
const reactFile = path.join(__dirname, 'cache', 'autoreact.txt');

const reactions = [
  // Faces
  "üòÉ","üòÑ","üòÅ","üòÜ","üòÖ","ü§£","üò≠","üòì","ü•∞","üòá","üòú","üòû","üòõ",
  "ü´¢","üòí","üò∂","ü§¢","ü•µ","ü§ì","üòµ‚Äçüí´","üòé","ü§†","üòµ","üò™","üò¨","ü•π",
  "üò©","üòì","üòà","üëø","üò´","üò°","üò§","üò¶","üò´",

  // Cats / Animals
  "üò∫","üòº","üôÄ","üòæ","üôà","üôâ","üôä","üê±","ü¶ñ","üê∏","üê¢","ü¶Ñ","üê∑","üêç","üêô","ü¶â","üêß","üê•","ü¶ã",

  // Extras
  "üòÆ‚Äçüí®","ü´®","ü´†","ü´£","ü§Ø","ü•¥","ü§ß","ü§ï","ü§í","üò∑","üí©","üëΩ","üëæ","üëÅÔ∏è‚Äçüó®Ô∏è",

  // Body & Action
  "üíã","üëÄ","ü´¶","üôã‚Äç‚ôÇÔ∏è","ü§¶‚Äç‚ôÄÔ∏è","ü§¶‚Äç‚ôÇÔ∏è","ü§∑‚Äç‚ôÄÔ∏è","üßç‚Äç‚ôÇÔ∏è","üßé‚Äç‚ôÄÔ∏è","ü´∂","üíÖ","üë£",

  // Professions
  "üë®‚Äç‚öïÔ∏è","üë®‚Äçüè´","üßô‚Äç‚ôÇÔ∏è","üßõ‚Äç‚ôÄÔ∏è","üßü‚Äç‚ôÇÔ∏è","üßå","ü¶π‚Äç‚ôÄÔ∏è","ü¶∏‚Äç‚ôÇÔ∏è",

  // Magic & Fun
  "üîÆ","üßø","ü™Ñ","ü™©","ü™Ö","ü™Å","üé≠","üé™","üß∏","üéâ","üß®",

  // Vehicles
  "üö•","üö¶","üõë","üöß","‚öì","‚úàÔ∏è","‚õµ","üö§","üöÄ","üõ∏","üõµ","üöì","üõ≥Ô∏è","üöÅ",

  // Space / Nature
  "üåö","üåù","ü™ê","üåü","üå†","‚òÑÔ∏è","üå™Ô∏è","üåÄ","üåà","üî•","üí´",

  // Misc
  "üëì","üß≥","üéß","üì¶","üê∏","üìØ","üßª","ü™†","üßΩ","ü™û","üõê"
];

module.exports = {
  config: {
    name: "a",
    version: "2.0.0",
    hasPermssion: 2,
    author: "Zihad",
    shortDescription: {
      en: "Toggle auto seen and auto react"
    },
    longDescription: {
      en: "Enable or disable automatic seen and reaction for new messages."
    },
    category: "admin",
    guide: {
      en: "[seen on/off] | [react on/off]"
    },
    cooldowns: 5
  },

  onChat: async ({ api, event }) => {
    // AutoSeen
    if (fs.existsSync(seenFile) && fs.readFileSync(seenFile, 'utf-8') === 'true') {
      api.markAsReadAll(() => {});
    }

    // AutoReact
    if (fs.existsSync(reactFile) && fs.readFileSync(reactFile, 'utf-8') === 'true') {
      const random = reactions[Math.floor(Math.random() * reactions.length)];
      try {
        await api.setMessageReaction(random, event.messageID, null, true);
      } catch (err) {
        console.log("AutoReact Error:", err);
      }
    }
  },

  onStart: async ({ api, event, args }) => {
    try {
      const option = args[0];
      const value = args[1];

      if (option === 'seen') {
        if (value === 'on') {
          fs.writeFileSync(seenFile, 'true');
          return api.sendMessage('‚úÖ AutoSeen is now ON.', event.threadID, event.messageID);
        } else if (value === 'off') {
          fs.writeFileSync(seenFile, 'false');
          return api.sendMessage('‚ùå AutoSeen is now OFF.', event.threadID, event.messageID);
        } else {
          return api.sendMessage('‚ö†Ô∏è Usage: auto seen on/off', event.threadID, event.messageID);
        }
      }

      if (option === 'react') {
        if (value === 'on') {
          fs.writeFileSync(reactFile, 'true');
          return api.sendMessage('‚úÖ AutoReact is now ON.', event.threadID, event.messageID);
        } else if (value === 'off') {
          fs.writeFileSync(reactFile, 'false');
          return api.sendMessage('‚ùå AutoReact is now OFF.', event.threadID, event.messageID);
        } else {
          return api.sendMessage('‚ö†Ô∏è Usage: auto react on/off', event.threadID, event.messageID);
        }
      }

      // Invalid usage
      return api.sendMessage('‚ö†Ô∏è Invalid usage.\nUse:\n- autoseen seen on/off\n- autoseen react on/off', event.threadID, event.messageID);

    } catch (e) {
      console.error(e);
      api.sendMessage('‚ùå Something went wrong while executing autoseen command.', event.threadID, event.messageID);
    }
  }
};
